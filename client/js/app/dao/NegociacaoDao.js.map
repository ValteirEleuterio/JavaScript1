{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","request","transaction","objectStore","add","onsuccess","onerror","e","Error","Promise","resolve","reject","cursor","openCursor","negociacoes","atual","target","result","dado","value","push","_data","_quantidade","_valor","continue","console","error","clear","log"],"mappings":";;;;;;;;;;;;;;;AAASA,gB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;+BAEIC,a;AACX,+BAAYC,UAAZ,EAAwB;AAAA;;AACtB,eAAKC,WAAL,GAAmBD,UAAnB;AACA,eAAKE,MAAL,GAAc,aAAd;AACD;;;;yCAEcC,U,EAAY;AACzB,gBAAIC,UAAU,KAAKH,WAAL,CACXI,WADW,CACC,CAAC,KAAKH,MAAN,CADD,EACgB,WADhB,EAEXI,WAFW,CAEC,KAAKJ,MAFN,EAGXK,GAHW,CAGPJ,UAHO,CAAd;;AAKAC,oBAAQI,SAAR,GAAoB,YAAM;AACxB;AACD,aAFD;;AAIAJ,oBAAQK,OAAR,GAAkB,UAACC,CAAD,EAAO;AACvB,oBAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD,aAFD;AAGD;;;uCAEY;AAAA;;AACX,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,SAAS,MAAKd,WAAL,CACVI,WADU,CACE,CAAC,MAAKH,MAAN,CADF,EACiB,WADjB,EAEVI,WAFU,CAEE,MAAKJ,MAFP,EAGVc,UAHU,EAAb;;AAKA,kBAAIC,cAAc,EAAlB;;AAEAF,qBAAOP,SAAP,GAAmB,UAACE,CAAD,EAAO;AACxB,oBAAIQ,QAAQR,EAAES,MAAF,CAASC,MAArB;;AAEA,oBAAIF,KAAJ,EAAW;AACT,sBAAIG,OAAOH,MAAMI,KAAjB;;AAEAL,8BAAYM,IAAZ,CACE,IAAIzB,UAAJ,CAAeuB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CADF;;AAIAR,wBAAMS,QAAN;AACD,iBARD,MAQO;AACLd,0BAAQI,WAAR;AACD;AACF,eAdD;;AAgBAF,qBAAON,OAAP,GAAiB,UAACC,CAAD,EAAO;AACtBkB,wBAAQC,KAAR,CAAcnB,EAAES,MAAF,CAASU,KAAvB;AACAf,uBAAO,wCAAP;AACD,eAHD;AAID,aA5BM,CAAP;AA6BD;;;uCAEY;AAAA;;AACX,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIV,UAAU,OAAKH,WAAL,CACXI,WADW,CACC,CAAC,OAAKH,MAAN,CADD,EACgB,WADhB,EAEXI,WAFW,CAEC,OAAKJ,MAFN,EAGX4B,KAHW,EAAd;;AAKA1B,sBAAQI,SAAR,GAAoB,UAACE,CAAD;AAAA,uBAAOG,QAAQ,mCAAR,CAAP;AAAA,eAApB;;AAEAT,sBAAQK,OAAR,GAAkB,UAACC,CAAD,EAAO;AACvBkB,wBAAQG,GAAR,CAAYrB,EAAES,MAAF,CAASU,KAArB;AACAf,uBAAO,yCAAP;AACD,eAHD;AAID,aAZM,CAAP;AAaD","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from \"../models/Negociacao\";\r\n\r\nexport class NegociacaoDao {\r\n  constructor(connection) {\r\n    this._connection = connection;\r\n    this._store = \"negociacoes\";\r\n  }\r\n\r\n  async adiciona(negociacao) {\r\n    let request = this._connection\r\n      .transaction([this._store], \"readwrite\")\r\n      .objectStore(this._store)\r\n      .add(negociacao);\r\n\r\n    request.onsuccess = () => {\r\n      return;\r\n    };\r\n\r\n    request.onerror = (e) => {\r\n      throw new Error(\"Não foi possível adicionar a negociação\");\r\n    };\r\n  }\r\n\r\n  listaTodos() {\r\n    return new Promise((resolve, reject) => {\r\n      let cursor = this._connection\r\n        .transaction([this._store], \"readwrite\")\r\n        .objectStore(this._store)\r\n        .openCursor();\r\n\r\n      let negociacoes = [];\r\n\r\n      cursor.onsuccess = (e) => {\r\n        let atual = e.target.result;\r\n\r\n        if (atual) {\r\n          let dado = atual.value;\r\n\r\n          negociacoes.push(\r\n            new Negociacao(dado._data, dado._quantidade, dado._valor)\r\n          );\r\n\r\n          atual.continue();\r\n        } else {\r\n          resolve(negociacoes);\r\n        }\r\n      };\r\n\r\n      cursor.onerror = (e) => {\r\n        console.error(e.target.error);\r\n        reject(\"Não foi possível listar as negociações\");\r\n      };\r\n    });\r\n  }\r\n\r\n  apagaTodos() {\r\n    return new Promise((resolve, reject) => {\r\n      let request = this._connection\r\n        .transaction([this._store], \"readwrite\")\r\n        .objectStore(this._store)\r\n        .clear();\r\n\r\n      request.onsuccess = (e) => resolve(\"Negociações removidas com sucesso\");\r\n\r\n      request.onerror = (e) => {\r\n        console.log(e.target.error);\r\n        reject(\"Não foi possível remover as negociações\");\r\n      };\r\n    });\r\n  }\r\n}\r\n"]}