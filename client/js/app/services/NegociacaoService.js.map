{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","objeto","Negociacao","Date","data","quantidade","valor","catch","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","conexao","ConnectionFactory","getConnection","NegociacaoDao","adiciona","connection","dao","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","isEquals"],"mappings":";;;;;;IAAMA,iB;AACJ,+BAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,IAAIC,WAAJ,EAAb;AACD;;;;+CAE0B;AACzB,aAAO,KAAKD,KAAL,CACJE,GADI,CACA,qBADA,EAEJC,IAFI,CAEC,UAACC,WAAD,EAAiB;AACrB,eAAOA,YAAYC,GAAZ,CACL,UAACC,MAAD;AAAA,iBACE,IAAIC,UAAJ,CACE,IAAIC,IAAJ,CAASF,OAAOG,IAAhB,CADF,EAEEH,OAAOI,UAFT,EAGEJ,OAAOK,KAHT,CADF;AAAA,SADK,CAAP;AAQD,OAXI,EAYJC,KAZI,CAYE,UAACC,IAAD,EAAU;AACf,cAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD,OAdI,CAAP;AAeD;;;uDAEkC;AACjC,aAAO,KAAKd,KAAL,CACJE,GADI,CACA,uBADA,EAEJC,IAFI,CAEC,UAACC,WAAD,EAAiB;AACrB,eAAOA,YAAYC,GAAZ,CACL,UAACC,MAAD;AAAA,iBACE,IAAIC,UAAJ,CACE,IAAIC,IAAJ,CAASF,OAAOG,IAAhB,CADF,EAEEH,OAAOI,UAFT,EAGEJ,OAAOK,KAHT,CADF;AAAA,SADK,CAAP;AAQD,OAXI,EAYJC,KAZI,CAYE,UAACC,IAAD,EAAU;AACf,cAAM,IAAIC,KAAJ,CACJ,0DADI,CAAN;AAGD,OAhBI,CAAP;AAiBD;;;wDAEmC;AAClC,aAAO,KAAKd,KAAL,CACJE,GADI,CACA,wBADA,EAEJC,IAFI,CAEC,UAACC,WAAD,EAAiB;AACrB,eAAOA,YAAYC,GAAZ,CACL,UAACC,MAAD;AAAA,iBACE,IAAIC,UAAJ,CACE,IAAIC,IAAJ,CAASF,OAAOG,IAAhB,CADF,EAEEH,OAAOI,UAFT,EAGEJ,OAAOK,KAHT,CADF;AAAA,SADK,CAAP;AAQD,OAXI,EAYJC,KAZI,CAYE,UAACC,IAAD,EAAU;AACf,cAAM,IAAIC,KAAJ,CACJ,2DADI,CAAN;AAGD,OAhBI,CAAP;AAiBD;;;uCAEkB;AACjB,aAAOC,QAAQC,GAAR,CAAY,CACjB,KAAKC,wBAAL,EADiB,EAEjB,KAAKC,gCAAL,EAFiB,EAGjB,KAAKC,iCAAL,EAHiB,CAAZ,EAKJhB,IALI,CAKC,UAACiB,QAAD,EAAc;AAClB,YAAIhB,cAAcgB,SAASC,MAAT,CAChB,UAACC,KAAD,EAAQC,OAAR;AAAA,iBAAoBD,MAAME,MAAN,CAAaD,OAAb,CAApB;AAAA,SADgB,EAEhB,EAFgB,CAAlB;;AAKA,eAAOnB,WAAP;AACD,OAZI,EAaJQ,KAbI,CAaE,UAACC,IAAD,EAAU;AACf,cAAM,IAAIC,KAAJ,CAAUD,IAAV,CAAN;AACD,OAfI,CAAP;AAgBD;;;mCAEcY,U,EAAY;AACzB,UAAI;AACF,YAAIC,UAAU,MAAMC,kBAAkBC,aAAlB,EAApB;AACA,cAAM,IAAIC,aAAJ,CAAkBH,OAAlB,EAA2BI,QAA3B,CAAoCL,UAApC,CAAN;AACA,eAAO,mCAAP;AACD,OAJD,CAIE,OAAOZ,IAAP,EAAa;AACb,cAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;AACF;;;kCAEa;AACZ,UAAI;AACF,YAAIiB,aAAa,MAAMJ,kBAAkBC,aAAlB,EAAvB;AACA,YAAII,MAAM,IAAIH,aAAJ,CAAkBE,UAAlB,CAAV;AACA,YAAI3B,cAAc,MAAM4B,IAAIC,UAAJ,EAAxB;AACA,eAAO7B,WAAP;AACD,OALD,CAKE,OAAOS,IAAP,EAAa;AACb,cAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;;kCAEa;AACZ,UAAIiB,aAAa,MAAMJ,kBAAkBC,aAAlB,EAAvB;AACA,UAAII,MAAM,IAAIH,aAAJ,CAAkBE,UAAlB,CAAV;AACA,aAAO,MAAMC,IAAIE,UAAJ,EAAb;AACD;;;kCAEaC,U,EAAY;AACxB,UAAI;AACF,YAAI/B,cAAc,MAAM,KAAKgC,gBAAL,EAAxB;AACA,eAAOhC,YAAYiC,MAAZ,CACL,UAACZ,UAAD;AAAA,iBACE,CAACU,WAAWG,IAAX,CAAgB,UAACC,mBAAD;AAAA,mBACfd,WAAWe,QAAX,CAAoBD,mBAApB,CADe;AAAA,WAAhB,CADH;AAAA,SADK,CAAP;AAMD,OARD,CAQE,OAAO1B,IAAP,EAAa;AACb,cAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;AACF","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n  constructor() {\r\n    this._http = new HttpService();\r\n  }\r\n\r\n  obterNegociacoesDaSemana() {\r\n    return this._http\r\n      .get(\"/negociacoes/semana\")\r\n      .then((negociacoes) => {\r\n        return negociacoes.map(\r\n          (objeto) =>\r\n            new Negociacao(\r\n              new Date(objeto.data),\r\n              objeto.quantidade,\r\n              objeto.valor\r\n            )\r\n        );\r\n      })\r\n      .catch((erro) => {\r\n        throw new Error(\"Não foi possível obter as negociações da semana\");\r\n      });\r\n  }\r\n\r\n  obterNegociacoesDaSemanaAnterior() {\r\n    return this._http\r\n      .get(\"/negociacoes/anterior\")\r\n      .then((negociacoes) => {\r\n        return negociacoes.map(\r\n          (objeto) =>\r\n            new Negociacao(\r\n              new Date(objeto.data),\r\n              objeto.quantidade,\r\n              objeto.valor\r\n            )\r\n        );\r\n      })\r\n      .catch((erro) => {\r\n        throw new Error(\r\n          \"Não foi possível obter as negociações da semana anterior\"\r\n        );\r\n      });\r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada() {\r\n    return this._http\r\n      .get(\"/negociacoes/retrasada\")\r\n      .then((negociacoes) => {\r\n        return negociacoes.map(\r\n          (objeto) =>\r\n            new Negociacao(\r\n              new Date(objeto.data),\r\n              objeto.quantidade,\r\n              objeto.valor\r\n            )\r\n        );\r\n      })\r\n      .catch((erro) => {\r\n        throw new Error(\r\n          \"Não foi possível obter as negociações da semana retrasada\"\r\n        );\r\n      });\r\n  }\r\n\r\n  obterNegociacoes() {\r\n    return Promise.all([\r\n      this.obterNegociacoesDaSemana(),\r\n      this.obterNegociacoesDaSemanaAnterior(),\r\n      this.obterNegociacoesDaSemanaRetrasada(),\r\n    ])\r\n      .then((periodos) => {\r\n        let negociacoes = periodos.reduce(\r\n          (dados, periodo) => dados.concat(periodo),\r\n          []\r\n        );\r\n\r\n        return negociacoes;\r\n      })\r\n      .catch((erro) => {\r\n        throw new Error(erro);\r\n      });\r\n  }\r\n\r\n  async cadastra(negociacao) {\r\n    try {\r\n      let conexao = await ConnectionFactory.getConnection();\r\n      await new NegociacaoDao(conexao).adiciona(negociacao);\r\n      return \"Negociação adicionada com sucesso\";\r\n    } catch (erro) {\r\n      throw new Error(\"Não foi possível adicionar a negociação\");\r\n    }\r\n  }\r\n\r\n  async lista() {\r\n    try {\r\n      let connection = await ConnectionFactory.getConnection();\r\n      let dao = new NegociacaoDao(connection);\r\n      let negociacoes = await dao.listaTodos();\r\n      return negociacoes;\r\n    } catch (erro) {\r\n      throw new Error(\"Não foi possível obter as negociações\");\r\n    }\r\n  }\r\n\r\n  async apaga() {\r\n    let connection = await ConnectionFactory.getConnection();\r\n    let dao = new NegociacaoDao(connection);\r\n    return await dao.apagaTodos();\r\n  }\r\n\r\n  async importa(listaAtual) {\r\n    try {\r\n      let negociacoes = await this.obterNegociacoes();\r\n      return negociacoes.filter(\r\n        (negociacao) =>\r\n          !listaAtual.some((negociacaoExistente) =>\r\n            negociacao.isEquals(negociacaoExistente)\r\n          )\r\n      );\r\n    } catch (erro) {\r\n      throw new Error(\"Não foi possível importar as negociações\");\r\n    }\r\n  }\r\n}\r\n"]}