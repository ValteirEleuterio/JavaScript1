{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","get","then","negociacoes","map","objeto","Date","data","quantidade","valor","catch","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","conexao","getConnection","adiciona","connection","dao","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","isEquals"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from \"./HttpService\";\r\nimport { ConnectionFactory } from \"./ConnectionFactory\";\r\nimport { NegociacaoDao } from \"../dao/NegociacaoDao\";\r\nimport { Negociacao } from \"../models/Negociacao\";\r\n\r\nexport class NegociacaoService {\r\n  constructor() {\r\n    this._http = new HttpService();\r\n  }\r\n\r\n  obterNegociacoesDaSemana() {\r\n    return this._http\r\n      .get(\"/negociacoes/semana\")\r\n      .then((negociacoes) => {\r\n        return negociacoes.map(\r\n          (objeto) =>\r\n            new Negociacao(\r\n              new Date(objeto.data),\r\n              objeto.quantidade,\r\n              objeto.valor\r\n            )\r\n        );\r\n      })\r\n      .catch((erro) => {\r\n        throw new Error(\"Não foi possível obter as negociações da semana\");\r\n      });\r\n  }\r\n\r\n  obterNegociacoesDaSemanaAnterior() {\r\n    return this._http\r\n      .get(\"/negociacoes/anterior\")\r\n      .then((negociacoes) => {\r\n        return negociacoes.map(\r\n          (objeto) =>\r\n            new Negociacao(\r\n              new Date(objeto.data),\r\n              objeto.quantidade,\r\n              objeto.valor\r\n            )\r\n        );\r\n      })\r\n      .catch((erro) => {\r\n        throw new Error(\r\n          \"Não foi possível obter as negociações da semana anterior\"\r\n        );\r\n      });\r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada() {\r\n    return this._http\r\n      .get(\"/negociacoes/retrasada\")\r\n      .then((negociacoes) => {\r\n        return negociacoes.map(\r\n          (objeto) =>\r\n            new Negociacao(\r\n              new Date(objeto.data),\r\n              objeto.quantidade,\r\n              objeto.valor\r\n            )\r\n        );\r\n      })\r\n      .catch((erro) => {\r\n        throw new Error(\r\n          \"Não foi possível obter as negociações da semana retrasada\"\r\n        );\r\n      });\r\n  }\r\n\r\n  obterNegociacoes() {\r\n    return Promise.all([\r\n      this.obterNegociacoesDaSemana(),\r\n      this.obterNegociacoesDaSemanaAnterior(),\r\n      this.obterNegociacoesDaSemanaRetrasada(),\r\n    ])\r\n      .then((periodos) => {\r\n        let negociacoes = periodos.reduce(\r\n          (dados, periodo) => dados.concat(periodo),\r\n          []\r\n        );\r\n\r\n        return negociacoes;\r\n      })\r\n      .catch((erro) => {\r\n        throw new Error(erro);\r\n      });\r\n  }\r\n\r\n  async cadastra(negociacao) {\r\n    try {\r\n      let conexao = await ConnectionFactory.getConnection();\r\n      await new NegociacaoDao(conexao).adiciona(negociacao);\r\n      return \"Negociação adicionada com sucesso\";\r\n    } catch (erro) {\r\n      throw new Error(\"Não foi possível adicionar a negociação\");\r\n    }\r\n  }\r\n\r\n  async lista() {\r\n    try {\r\n      let connection = await ConnectionFactory.getConnection();\r\n      let dao = new NegociacaoDao(connection);\r\n      let negociacoes = await dao.listaTodos();\r\n      return negociacoes;\r\n    } catch (erro) {\r\n      throw new Error(\"Não foi possível obter as negociações\");\r\n    }\r\n  }\r\n\r\n  async apaga() {\r\n    let connection = await ConnectionFactory.getConnection();\r\n    let dao = new NegociacaoDao(connection);\r\n    return await dao.apagaTodos();\r\n  }\r\n\r\n  async importa(listaAtual) {\r\n    try {\r\n      let negociacoes = await this.obterNegociacoes();\r\n      return negociacoes.filter(\r\n        (negociacao) =>\r\n          !listaAtual.some((negociacaoExistente) =>\r\n            negociacao.isEquals(negociacaoExistente)\r\n          )\r\n      );\r\n    } catch (erro) {\r\n      throw new Error(\"Não foi possível importar as negociações\");\r\n    }\r\n  }\r\n}\r\n"]}